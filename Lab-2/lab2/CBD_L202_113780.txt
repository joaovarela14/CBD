// NMEC: 113780

// 1. Liste todos os documentos da coleção.

db.restaurants.find()

// 2. Apresente os campos restaurant_id, nome, localidade e gastronomia para todos os documentos da coleção

db.restaurants.find({}, { restaurant_id: 1, nome: 1, localidade: 1, gastronomia: 1, _id: 0 })

// 3. Apresente os campos restaurant_id, nome, localidade e código postal (zipcode), mas exclua o campo _id de todos os documentos da coleção.

db.restaurants.find({}, { restaurant_id: 1, nome: 1, localidade: 1, "address.zipcode": 1, _id: 0 })

// 4. Indique o total de restaurantes localizados no Bronx.

db.restaurants.find({ localidade: "Bronx" }).count()

309

// 5. Apresente os primeiros 15 restaurantes localizados no Bronx, ordenados por ordem crescente de nome.

db.restaurants.find({ localidade: "Bronx" }).sort({ nome: 1 }).limit(15)

count: 15 (obvio xD)

// 6. Liste todos os restaurantes que tenham pelo menos um score superior a 85.

db.restaurants.find({ "grades.score": { $gt: 85 } })

count: 4

// 7. Encontre os restaurantes que obtiveram uma ou mais pontuações (score) entre [80 e 100].

db.restaurants.find({grades: { $elemMatch: {"score": {$gte: 80, $lte: 100}}  }})

count: 4

// 8. Indique os restaurantes com latitude inferior a -95,7.

db.restaurants.find({ "address.coord.0": { $lt: -95.7 } })

count: 3

// 9. Indique os restaurantes que não têm gastronomia "American", tiveram uma (ou mais) pontuação superior a 70 e estão numa latitude inferior a -65.

db.restaurants.find({ gastronomia: { $ne: "American" }, "grades.score": { $gt: 70 }, "address.coord.0": { $lt: -65 } })

count: 5

// 10. Liste o restaurant_id, o nome, a localidade e gastronomia dos restaurantes cujo nome começam por "Wil".

db.restaurants.find({ nome: /^Wil/ }, { restaurant_id: 1, nome: 1, localidade: 1, gastronomia: 1, _id: 0 })

count: 3

// 11. Liste o nome, a localidade e a gastronomia dos restaurantes que pertencem ao Bronx e cuja gastronomia é do tipo "American" ou "Chinese".

db.restaurants.find({ localidade: "Bronx", gastronomia: { $in: ["American", "Chinese"] } }, { nome: 1, localidade: 1, gastronomia: 1, _id: 0 })

count: 91

// 12. Liste o restaurant_id, o nome, a localidade e a gastronomia dos restaurantes localizados em "Staten Island", "Queens", ou "Brooklyn".

db.restaurants.find({ localidade: { $in: ["Staten Island", "Queens", "Brooklyn"] }}, { restaurant_id: 1, nome: 1, localidade: 1, gastronomia: 1, _id: 0 })

count: 1580

// 13. Liste o nome, a localidade, o score e gastronomia dos restaurantes que alcançaram sempre pontuações inferiores ou igual a 3.

db.restaurants.find({ "grades.score": { $not: { $gt: 3 } } }, { nome: 1, localidade: 1, "grades.score": 1, gastronomia: 1, _id: 0 })

count: 7

// 14. Liste o nome e as avaliações dos restaurantes que obtiveram uma avaliação com um grade "A", um score 10 na data "2014-08-11T00: 00: 00Z" (ISODATE).

db.restaurants.find({ grades: { $elemMatch: { grade: "A", score: 10, date: ISODate("2014-08-11T00:00:00Z") } } }, { nome: 1, grades: 1, _id: 0 })

count: 6

// 15. Liste o restaurant_id, o nome e os score dos restaurantes nos quais a segunda avaliação foi grade "A" e ocorreu em ISODATE "2014-08-11T00: 00: 00Z".

db.restaurants.find({ "grades.1.grade": "A", "grades.1.date": ISODate("2014-08-11T00:00:00Z") }, { restaurant_id: 1, nome: 1, "grades.score": 1, _id: 0 })

count: 2

// 16. Liste o restaurant_id, o nome, o endereço (address) dos restaurantes onde o 2º elemento da matriz de coordenadas (coord) tem um valor superior a 42 e inferior ou igual a 52.

db.restaurants.find({ "address.coord.1": { $gt: 42, $lte: 52 } }, { restaurant_id: 1, nome: 1, address: 1, _id: 0 })

count: 7

// 17. Liste nome, gastronomia e localidade de todos os restaurantes ordenando por ordem crescente da gastronomia e, em segundo, por ordem decrescente de localidade.

db.restaurants.find({}, { "nome": 1, "gastronomia": 1, "localidade": 1, "_id": 0 }).sort({ "gastronomia": 1, "localidade": -1 })

// 18. Liste nome, localidade, grade e gastronomia de todos os restaurantes localizados em Brooklyn que não incluem gastronomia "American" e obtiveram uma classificação (grade) "A". Deve apresentá-los por ordem decrescente de gastronomia.

db.restaurants.find({ localidade: "Brooklyn", gastronomia: { $ne: "American" }, "grades.grade": "A" }, { nome: 1, localidade: 1, "grades.grade": 1, gastronomia: 1, _id: 0 }).sort({ gastronomia: -1 })

count: 493

// 19. Indique o número total de avaliações (numGrades) na coleção.

db.restaurants.aggregate([ { $unwind: "$grades" }, { $group: { _id: null, numGrades: { $sum: 1 } } } ])

count: 18142

// 20. Apresente o nome e número de avaliações (numGrades) dos 3 restaurante com mais avaliações.

db.restaurants.aggregate([ { $unwind: "$grades" }, { $group: { _id: "$nome", numGrades: { $sum: 1 } } }, { $sort: { numGrades: -1 } }, { $limit: 3 } ])

// 21. Apresente o número total de avaliações (numGrades) em cada dia da semana.

db.restaurants.aggregate([
  {
    $unwind: "$grades"
  },
  {
    $group: {
      _id: { $dayOfWeek: { $toDate: "$grades.date" } },
      totalAvaliacoes: { $sum: 1 }
    }
  },
  {
    $project: {
      _id: 0,
      diaSemana: {
        $switch: {
          branches: [
            { case: { $eq: ["$_id", 1] }, then: "Domingo" },
            { case: { $eq: ["$_id", 2] }, then: "Segunda-feira" },
            { case: { $eq: ["$_id", 3] }, then: "Terça-feira" },
            { case: { $eq: ["$_id", 4] }, then: "Quarta-feira" },
            { case: { $eq: ["$_id", 5] }, then: "Quinta-feira" },
            { case: { $eq: ["$_id", 6] }, then: "Sexta-feira" },
            { case: { $eq: ["$_id", 7] }, then: "Sábado" },
          ],
          default: "Desconhecido"
        }
      },
      totalAvaliacoes: 1
    }
  },
  {
    $sort: { diaSemana: 1 }
  }
])


// 22. Conte o total de restaurante existentes em cada localidade.

db.restaurants.aggregate([
  {
    $group: {
      _id: "$localidade",
      totalRestaurantes: { $sum: 1 }
    }
  }
])

// 23. Indique os restaurantes que têm gastronomia "Portuguese", o somatório de score é superior a 50 e estão numa latitude inferior a -60. usa match

//alterar para agregate !!

db.restaurants.find({ gastronomia: "Portuguese", $expr: { $gt: [{ $sum: "$grades.score" }, 50] }, "address.coord.0": { $lt: -60 } })

count: 2

// 24. Apresente o número de gastronomias diferentes na rua "Fifth Avenue"

db.restaurants.distinct("gastronomia", { "address.rua": "Fifth Avenue" }).length

count: 4

// 25. Apresente o nome e o score médio (avgScore) e número de avaliações (numGrades) dos restaurantes com score médio superior a 30 desde 1-Jan-2014.

db.restaurants.aggregate([
    {$unwind: "$grades"},
    {
        $match: {
            "grades.date": {
                $gte: ISODate('2014-01-01')
            }
        }
    },
    {
        $group: {
            _id: "$nome",
            avgScore: {
                $avg: "$grades.score"
            },
            numGrades: {
                $sum: 1
            }
        }
    },
    {
        $match: {
            avgScore: {
                $gt: 30
            }
        }
    }
])

// 26. Liste o nome e a gastronomia dos restaurantes localizados em "Manhattan" que tenham "Cafe" no nome.

 db.restaurants.find({ localidade: "Manhattan", nome: /Cafe/ }, { nome: 1, gastronomia: 1, _id: 0 })

 count: 167

// 27. Liste todos os restaurantes localizados no bairro "Queens" que têm pelo menos uma avaliação com o grade "B".


db.restaurants.find({ localidade: "Queens", "grades.grade": "B" }, { nome: 1, localidade: 1, "grades.grade": 1, _id: 0 })

count: 311

// 28. Encontre restaurantes onde o nome termina com "King" e liste o restaurant_id, nome e gastronomia.

db.restaurants.find({ nome: /King$/ }, { restaurant_id: 1, nome: 1, gastronomia: 1, _id: 0 })

count: 41

// 29. Liste o nome e o total de restaurantes com "Steak" no nome em cada localidade.

db.restaurants.aggregate([
  { $match: { nome: /Steak/ } },
  { $group: { _id: "$localidade", totalRestaurantes: { $sum: 1 } } },
  { $project: { localidade: "$_id", totalRestaurantes: 1, _id: 0 } }
])


// 30. Liste o nome e a data da avaliação mais recente de cada restaurante.

db.restaurants.aggregate([
  { $unwind: "$grades" },
  { $group: { _id: "$nome", ultimaAvaliacao: { $max: "$grades.date" } } },
  { $project: { nome: "$_id", ultimaAvaliacao: 1, _id: 0 } }
])